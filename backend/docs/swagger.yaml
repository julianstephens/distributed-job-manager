basePath: /api/v1
definitions:
  httputil.HTTPError:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: status bad request
        type: string
    type: object
  httputil.HTTPResponse-array_table_Task:
    properties:
      data:
        items:
          $ref: '#/definitions/table.Task'
        type: array
      message:
        type: string
    type: object
  httputil.HTTPResponse-table_Task:
    properties:
      data:
        $ref: '#/definitions/table.Task'
      message:
        type: string
    type: object
  table.Task:
    properties:
      createdAt:
        type: integer
      description:
        type: string
      id:
        type: string
      recurrence:
        $ref: '#/definitions/table.TaskRecurrence'
      scheduledTime:
        type: integer
      status:
        $ref: '#/definitions/table.TaskStatus'
      title:
        type: string
      updatedAt:
        type: integer
    required:
    - scheduledTime
    - title
    type: object
  table.TaskRecurrence:
    enum:
    - 0
    - 1
    - 2
    - 3
    type: integer
    x-enum-varnames:
    - Once
    - Daily
    - Weekly
    - Monthly
  table.TaskStatus:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    type: integer
    x-enum-varnames:
    - StatusPending
    - StatusInProgress
    - StatusCompleted
    - StatusFailed
    - StatusCancelled
host: localhost:8080
info:
  contact: {}
  description: REST API for managing task scheduling
  title: DTS API
  version: 0.1.0
paths:
  /tasks:
    get:
      description: retrieves all tasks
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.HTTPResponse-array_table_Task'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKey: []
      summary: Get all tasks
      tags:
      - tasks
    post:
      description: creates a new task
      parameters:
      - description: Task data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/table.Task'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.HTTPResponse-table_Task'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKey: []
      summary: Create a task
      tags:
      - tasks
  /tasks/{task_id}:
    delete:
      description: deletes a specific task
      parameters:
      - description: Task ID
        in: path
        name: task_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.HTTPResponse-table_Task'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKey: []
      summary: Delete a task
      tags:
      - tasks
    get:
      description: retrieves a task by its ID
      parameters:
      - description: Task ID
        in: path
        name: task_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.HTTPResponse-table_Task'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKey: []
      summary: Get a specific task
      tags:
      - tasks
schemes:
- http
securityDefinitions:
  ApiKey:
    description: User-specific API key
    in: header
    name: X-API-KEY
    type: apiKey
swagger: "2.0"
