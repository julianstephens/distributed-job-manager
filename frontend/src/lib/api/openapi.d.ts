/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all tasks
         * @description retrieves all tasks
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "*/*": components["schemas"]["httputil.HTTPResponse-array_model_Task"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "*/*": components["schemas"]["httputil.HTTPError"];
                    };
                };
            };
        };
        /**
         * Put a task
         * @description creates or updates a task
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "*/*": components["schemas"]["httputil.HTTPResponse-model_Task"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "*/*": components["schemas"]["httputil.HTTPError"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "*/*": components["schemas"]["httputil.HTTPError"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{task_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a specific task
         * @description retrieves a task by its ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Task ID */
                    task_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "*/*": components["schemas"]["httputil.HTTPResponse-model_Task"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "*/*": components["schemas"]["httputil.HTTPError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete a task
         * @description deletes a specific task
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Task ID */
                    task_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "*/*": components["schemas"]["httputil.HTTPResponse-model_Task"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "*/*": components["schemas"]["httputil.HTTPError"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "*/*": components["schemas"]["httputil.HTTPError"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @example {
         *       "code": 400,
         *       "message": "status bad request"
         *     } */
        "httputil.HTTPError": {
            /** @example 400 */
            code?: number;
            /** @example status bad request */
            message?: string;
        };
        /** @example {
         *       "data": [
         *         {
         *           "recurrence": 6,
         *           "createdAt": 0,
         *           "scheduledTime": 1,
         *           "description": "description",
         *           "id": "id",
         *           "title": "title",
         *           "version": "version",
         *           "status": 5,
         *           "updatedAt": 5
         *         },
         *         {
         *           "recurrence": 6,
         *           "createdAt": 0,
         *           "scheduledTime": 1,
         *           "description": "description",
         *           "id": "id",
         *           "title": "title",
         *           "version": "version",
         *           "status": 5,
         *           "updatedAt": 5
         *         }
         *       ],
         *       "message": "message"
         *     } */
        "httputil.HTTPResponse-array_model_Task": {
            data?: components["schemas"]["model.Task"][];
            message?: string;
        };
        /** @example {
         *       "data": {
         *         "recurrence": 6,
         *         "createdAt": 0,
         *         "scheduledTime": 1,
         *         "description": "description",
         *         "id": "id",
         *         "title": "title",
         *         "version": "version",
         *         "status": 5,
         *         "updatedAt": 5
         *       },
         *       "message": "message"
         *     } */
        "httputil.HTTPResponse-model_Task": {
            data?: components["schemas"]["model.Task"];
            message?: string;
        };
        /** @example {
         *       "recurrence": 6,
         *       "createdAt": 0,
         *       "scheduledTime": 1,
         *       "description": "description",
         *       "id": "id",
         *       "title": "title",
         *       "version": "version",
         *       "status": 5,
         *       "updatedAt": 5
         *     } */
        "model.Task": {
            createdAt?: number;
            description?: string;
            id?: string;
            recurrence: components["schemas"]["model.TaskRecurrence"];
            scheduledTime: number;
            status: components["schemas"]["model.TaskStatus"];
            title: string;
            updatedAt?: number;
            version?: string;
        };
        /** @enum {integer} */
        "model.TaskRecurrence": 0 | 1 | 2 | 3;
        /** @enum {integer} */
        "model.TaskStatus": 0 | 1 | 2 | 3 | 4;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
